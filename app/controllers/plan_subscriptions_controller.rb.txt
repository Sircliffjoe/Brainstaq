class PlanSubscriptionsController < ApplicationController
  before_action :set_plan_subscription, only: %i[ show edit update destroy ]

  def index
    @plan_subscriptions = PlanSubscription.all
  end

  def show
  end

  def new
    @plan_subscription = PlanSubscription.new
  end

  def edit
  end

  # POST /plan_subscriptions or /plan_subscriptions.json
  def create
    @plan_subscription = PlanSubscription.new(plan_subscription_params)

    respond_to do |format|
      if @plan_subscription.save
        format.html { redirect_to @plan_subscription, notice: "Plan subscription was successfully created." }
        format.json { render :show, status: :created, location: @plan_subscription }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @plan_subscription.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /plan_subscriptions/1 or /plan_subscriptions/1.json
  def update
    respond_to do |format|
      if @plan_subscription.update(plan_subscription_params)
        format.html { redirect_to @plan_subscription, notice: "Plan subscription was successfully updated." }
        format.json { render :show, status: :ok, location: @plan_subscription }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @plan_subscription.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /plan_subscriptions/1 or /plan_subscriptions/1.json
  def destroy
    @plan_subscription.destroy
    respond_to do |format|
      format.html { redirect_to plan_subscriptions_url, notice: "Plan subscription was successfully destroyed." }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_plan_subscription
      @plan_subscription = PlanSubscription.find(params[:id])
    end

    # Only allow a list of trusted parameters through.
    def plan_subscription_params
      params.fetch(:plan_subscription, {})
    end
end
