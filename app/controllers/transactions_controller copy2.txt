class TransactionsController < ApplicationController
	before_action :authenticate_user!
	
	#Webhook Url for Paystack after payment to create transaction 

	def success
		if params[:reference].present?
			redirect_to root_path, notice: "Sucessful Payment"
		else
			redirect_to new_subscription_path, notice: "Error Making Payment, Try Again"
		end
	end

	#End
	
	
	def callback
		res = 0;
		@paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
	 
		transaction_reference = params[:trxref]
		transactions = PaystackTransactions.new(@paystackObj)
		result = transactions.verify(transaction_reference)
		if result['data']['status'] == "success"
			@res = result['data']
			@customer = result['data']['customer']
			current_user.sub.update(status: 1 )
			if current_user.sub.interval == "monthly"
				res = 30
      else current_user.sub.interval == "annually"
				res = 365
			end

			if current_user.sub.transactions.any?
				if current_user.sub.transactions.last.expires_on > Date.today
					rem = (current_user.sub.transactions.last.expires_on - Date.today).to_s.split('/')
					offset = rem[0].to_i + res
					@transaction = current_user.sub.transactions.create(
						amount: (@res['amount'].to_f)/100,
						channel: @res['channel'], 
						reference: @res['reference'], 
						gateway_response: @res['gateway_response'],
						currency: @res['currency'], 
						status: @res['status'], 
						expires_on: Date.today + offset.days,
						created_at: Time.now, 
						updated_at: Time.now
					)
					
					redirect_to details_transaction_path(@transaction), notice: 'Your Subscription Upgrade was successful.'
				else
  				@transaction = current_user.sub.transactions.create(
						amount: (@res['amount'].to_f)/100,
						channel: @res['channel'], 
						reference: @res['reference'], 
						gateway_response: @res['gateway_response'],
						currency: @res['currency'], 
						status: @res['status'], 
						expires_on: Date.today + res.days,
						created_at: Time.now, 
						updated_at: Time.now
					)
					
					redirect_to details_transaction_path(@transaction), notice: 'Your Subscription was successful.'
				end			
			else
				@transaction =  current_user.sub.transactions.create(
					amount: (@res['amount'].to_f)/100,
					channel: @res['channel'], 
					reference: @res['reference'],
					gateway_response: @res['gateway_response'],
					currency: @res['currency'], 
					status: @res['status'], 
					expires_on: Date.today + res.days,
					created_at: Time.now, 
					updated_at: Time.now
				)
				
				redirect_to details_transaction_path(@transaction), notice: 'Your Subscription was successful.'
			 end
		else
			redirect_to new_transaction_path, notice: 'Payment Failed. Please try again'
		end
	end

	def new
		@paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
		page_number = 1
		plans = PaystackPlans.new(@paystackObj)
		result = plans.list(page_number)  #Optional `page_number` parameter,  50 items per page
		@plans_list = result['data']
		@transaction = Transaction.new
	end

	def edit
	end

	def create
		@paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
		transactions = PaystackTransactions.new(@paystackObj)

		result = transactions.initializeTransaction(
			amount: params[:amount],
			reference: "#{current_user.id}__#{rand.to_s[2..10]}",
			email: current_user.email,
			plan: params[:code]
		)
	
		auth_url = result['data']['authorization_url']

		redirect_to dashboard_path(current_user.full_name)
	end
end
