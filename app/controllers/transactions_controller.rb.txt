class TransactionsController < ApplicationController
	require 'httparty'
	require 'securerandom'
  require 'payment_processing'

	include PaymentProcessing

	before_action :create_paystack_obj, :update_user_status, only: [:callback, :show]
	# before_action :find_user

	def index
		@ress = Transaction.all
	end

	def new
    @paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
    response = HTTParty.get("https://api.paystack.co/plan?status=active", headers: { "Authorization" => "Bearer #{ENV['PAYSTACK_PRIVATE_KEY']}"})
    if response.code == 200
      @plans_list = response.parsed_response['data']
      @transaction = Transaction.new
    else
      flash[:error] = response.parsed_response['message']
    end
	end


	def details
		@res = Transaction.find(params[:id])
	end

	def callback
		begin
			transaction_reference = params[:trxref]
			transactions = PaystackTransactions.new(paystackObj)
			result = transactions.verify(transaction_reference)
	
			if result['data']['status'] == "success"
				@res = result['data']
				@customer = result['data']['customer']
				@transaction = current_user.transactions.new(
					amount: (@res['amount'].to_f)/100,
					channel: @res['channel'], 
					reference: @res['reference'], 
					gateway_response: @res['gateway_response'],
					currency: @res['currency'], 
					status: @res['status'], 
					expires_on: calculate_expiration_date,
				)
				if @transaction.save
					current_user.update(status: 1)
					flash[:notice] = 'Your Subscription was successful.'
				else
					flash[:notice] = 'Duplicate transaction.'
				end
			else
				flash[:notice] = 'Payment Failed. Please try again'
			end
		rescue PaystackService::TransactionVerificationError => e
			flash[:notice] = e.message
		end
		redirect_to details_transaction_path(@transaction)
	end

	def show
		transaction_reference = params[:trxref]
		transactions = PaystackTransactions.new(Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY']))
		result = transactions.verify(transaction_reference)
	
		if result['data']['status'] == "success"
			@res = result['data']
			@customer = result['data']['customer']
			current_user.update(status: 1 )
			expires_on = calculate_expires_on(current_user.interval)
			@transaction = create_transaction(current_user, @res, expires_on)
			redirect_to details_transaction_path(@transaction), notice: 'Your Subscription was successful.'
		else
			redirect_to new_transaction_path, notice: 'Payment Failed. Please try again'
		end
	end

	def create_paystack_obj
		@paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY']) 
		@transactions = PaystackTransactions.new(@paystackObj)
	end
	
	# def verify_transaction(transaction_reference)
	# 	@result = @transactions.verify(transaction_reference)
	# end

	def verify_transaction
		begin
				uri = URI("https://api.paystack.co/transaction/verify/#{@reference}")
				http = Net::HTTP.new(uri.host, uri.port)
				http.use_ssl = true
				http.verify_mode = OpenSSL::SSL::VERIFY_NONE
				req = Net::HTTP::Get.new(uri.path, {
						'Authorization' => "Bearer #{@paystack_key}"
				})
				res = http.request(req)
				subscribe = JSON.parse(res.body)
		rescue => e
				puts "failed #{e}"
				Raven.capture_exception(e)
		end
	end
	
	def calculate_expires_on
		if current_user.interval == "monthly"
			res = 30
		elsif current_user.interval == "annually"
			res = 365
		end
		if current_user.transactions.any?
			if current_user.transactions.last.expires_on > Date.today	
				rem = (current_user.transactions.last.expires_on - Date.today).to_s.split('/')
				offset = rem[0].to_i + res
				return Date.today + offset.days
			else
				return Date.today + res.days
			end
		else
			return Date.today + res.days
		end
	end
	
	def create_transaction(amount:, channel:, reference:, gateway_response:, currency:, status:, expires_on:)
		@transaction = current_user.transactions.create(
			amount: amount,
			channel: channel,
			reference: reference,
			gateway_response: gateway_response,
			currency: currency,
			status: status,
			expires_on: expires_on,
			created_at: Time.now,
			updated_at: Time.now
		)
	end
	
	def update_user_status
		current_user.update(status: 1)
	end

	def redirect_to_transaction_details
		redirect_to details_transaction_path(@transaction), notice: 'Your Subscription was successful.'
	end
	
	def redirect_to_new_transaction
  	redirect_to new_transaction_path, notice: 'Payment Failed. Please try again'
	end

	def upgrade
		@paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
		page_number = 1
		plans = PaystackPlans.new(@paystackObj)
		result = plans.list(page_number)
		@plans_list = result['data']
		@transaction = Transaction.new		
	end

	def edit
	end

	# def create
	# 	plan_code = params[:plan_code]
	# 	@paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
	# 	transactions = PaystackTransactions.new(@paystackObj)
	# 	result = transactions.initializeTransaction(
	# 		email: current_user.email,
	# 		plan: plan_code
	# 	)
	# 	auth_url = result['data']['authorization_url']
	# 	redirect_to auth_url
	# end
	
	def create
		plan_code = params[:plan_code]
  	paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_PRIVATE_KEY'])
  	transactions = PaystackTransactions.new(paystackObj)
  
  	result = transactions.initializeTransaction(
		:reference => 445556665566, #must be unique for every transaction created if not you will get a bad request error
		:plan => plan_code,
		:email => current_user.email
		)
  	
    auth_url = result['data']['authorization_url']
	  redirect_to auth_url

  end

	def update
		respond_to do |format|
			if @transaction.update(transaction_params)
				format.html { redirect_to @transaction, notice: 'transaction was successfully updated.' }
				format.json { render :show, status: :ok, location: @transaction }
			else
				format.html { render :edit }
				format.json { render json: @transaction.errors, status: :unprocessable_entity }
			end
		end
	end

  def destroy
		@transaction.destroy
		respond_to do |format|
			format.html { redirect_to transactions_url, notice: 'transaction was successfully destroyed.' }
			format.json { head :no_content }
		end
	end

	def send_paystack_invoice
		due_date = 7.days.from_now.strftime('%F')
		payload = {
			:description => @user.subscription_plan.description,
			:line_items => [
				{:name => @user.subscription_plan.plan_name, :amount => @user.subscription_plan.cost * 100}
			],
			:customer => @user.paystack_cust_code,
			:due_date => 7.days.from_now.strftime('%F'),
			:send_notification => true
		}
		send_invoice = nil  
		begin
			uri = URI('https://api.paystack.co/paymentrequest')
			http = Net::HTTP.new(uri.host, uri.port)
			http.use_ssl = true
			http.verify_mode = OpenSSL::SSL::VERIFY_NONE
			req = Net::HTTP::Post.new(uri.path, {'Content-Type' =>'application/json',
				'Authorization' => "Bearer #{ENV["PAYSTACK_PRIVATE_KEY"]}"})
			req.body = payload.to_json
			res = http.request(req)
			send_invoice = JSON.parse(res.body)
		rescue => e
				puts "failed #{e}"
		end
		if send_invoice["status"] == true
			render status: 200, json: {
				message: "success"
			}
		else
			render status: 500, json: {
				message: "failed"
			}
		end
	end

	def change_plan
		@subscription_plans = SubscriptionPlan.all
	end

	def renew_subscription
		amount, email, first_name = @user.subscription_plan.cost * 100, @user.email, @user.first_name
		last_name, displayValue = @user.last_name, @user.phone
		publicKey = ENV["PAYSTACK_PUBLIC_KEY"]
		user_id = @user.id
		session[:user_id] = @user.id
	end

	def paystack_renewal
		if check_paystack_subscription == true
			disable_current_paystack_subscription
			paystack_subscribe
		else
			paystack_subscribe
		end
	end

	def unsubscribe_subscription
		unsubscribe = disable_current_paystack_subscription
		if unsubscribe["status"] == true
			subscription_status = 1
			if @user.account_detail.expiry_date < DateTime.now 
				 @user.account_detail.member_status = 1
				 @user.account_detail.unsubscribe_date = DateTime.now
				 @user.account_detail.audit_comment = "subscription de-activated"
				 @user.save    
				 create_subscription_history(subscribe_date, expiry_date, subscription_status)
				 redirect_to dashboard_path(@user)
			else 
				subscribe_date = @user.account_detail.subscribe_date
				expiry_date = @user.account_detail.expiry_date
				@user.account_detail.unsubscribe_date = DateTime.now
				@user.save
				create_subscription_history(subscribe_date, expiry_date, subscription_status)
				redirect_to dashboard_path(@user)
			end
		else
			flash[:notice] = "Customer doesn't have recurring subscription plan"
			redirect_to dashboard_path(@user)
		end
	end

	def pause_subscription
	 customer_plan_duration = @user.subscription_plan.duration
	 case customer_plan_duration 
	 when "monthly"
			if @user.account_detail.pause_permit_count < 2
				pause_subscription_steps
			else
				render status: 200, json: {
					message: "pause exceeded"
				}
			end
	 when "annually"
			if @user.account_detail.pause_permit_count < 5
				pause_subscription_steps
			else
				render status: 200, json: {
					message: "pause exceeded"
				}
			end
		end
	end

	def cancel_pause 
		auth_code, current_date = @user.paystack_auth_code.to_s, DateTime.now
		previous_expiry_date = @user.account_detail.expiry_date.to_datetime
		previous_pause_start_date = @user.account_detail.pause_start_date.to_datetime
		duration = (current_date - previous_pause_start_date).to_f.ceil
		new_expiry_date = previous_expiry_date + duration
		paystack_charge_date = new_expiry_date.to_s
		paystack_customer_code = @user.paystack_cust_code.to_s
		plan_code = @user.subscription_plan.paystack_plan_code.to_s
		subscription_code = @user.paystack_subscription_code.to_s
		email_token = @user.paystack_email_token.to_s
		create_subscription = initiate_paystack_sub
		subscribe = create_subscription.create( customer: paystack_customer_code,
																						plan: plan_code,
																						authorization: auth_code,
																						start_date: paystack_charge_date,
																					)
		if subscribe["status"] == true
				enable_subscription = create_subscription.enable(code: subscription_code, token: email_token)
				@user.pause_histories.create(
						pause_start_date: @user.account_detail.pause_start_date,
						pause_cancel_date: @user.account_detail.pause_cancel_date,
						paused_by: current_user.full_name,
						pause_actual_cancel_date: current_date )

				@user.account_detail.update(
								expiry_date: new_expiry_date,
								member_status: 0,
								pause_start_date: nil,
								pause_cancel_date: nil,
								audit_comment: 'subscription pause cancelled' )
				create_attendance_record
				render status: 200, json: {
					message: "success"
				}  
		else
			render status: 200, json: {
				message: "failed"
			}
		end   
	end


	private

	def true?(obj)
		obj.to_s == "true"
	end
	
	def pause_subscription_steps
		if check_paystack_subscription == true
			disable_current_paystack_subscription
			update_pause_account_detail
			create_pause_history
			render status: 200, json: {
				message: "success"
			}
		else
			render status: 200, json: {
				message: "no subscription"
			}
		end
	end

	def create_pause_history
		@user.pause_histories.create(
			pause_start_date: @user.account_detail.pause_start_date,
			pause_cancel_date: @user.account_detail.pause_cancel_date,
			paused_by: current_user.full_name,
			audit_comment: "subscription paused")
	end

	def update_pause_account_detail
			@user.account_detail.pause_permit_count = @user.account_detail.pause_permit_count + 1
			@user.account_detail.pause_start_date = DateTime.now
			@user.account_detail.pause_cancel_date = DateTime.now + 7
			@user.account_detail.user_status = 2
			@user.account_detail.audit_comment = 'subscription paused'
			@user.save
	end

	def update_all_records(subscribe_date, expiry_date, recurring, amount, payment_method, subscription_status)
		create_charge
		update_account_detail(subscribe_date, expiry_date, recurring)
		create_subscription_history(subscribe_date, expiry_date, subscription_status)
		create_loyalty_history(amount)
		create_general_transaction(subscribe_date, amount, payment_method)
	end

	def retrieve_payment_method
		@user.payment_method.payment_system
	end

	def update_account_detail(subscribe_date, expiry_date, recurring)
		amount = retrieve_amount
		account_update = @user.account_detail.update(
																subscribe_date:subscribe_date,
																expiry_date: expiry_date,
																user_status: 0,
																amount: amount,
																unsubscribe_date: nil,
																plan: retrieve_plan,
																recurring_billing: recurring,
																audit_comment: 'Subscription renewed',)
	end

	def create_charge
		charge = @user.charges.new(service_plan: retrieve_plan,
																amount: retrieve_amount,
																payment_method: retrieve_payment_method,
																duration: @user.subscription_plan.duration,
																brainstaq_transaction_id: SecureRandom.hex(4) 
																)
		if charge.save
				UserMailer.renewal(@user).deliver_later
		end
	end

	def create_subscription_history(subscribe_date, expiry_date, subscription_status)
		subscription_history = @user.subscription_histories.create(
				subscribe_date: subscribe_date,
				expiry_date: expiry_date,
				subscription_type: 1,
				subscription_plan: retrieve_plan,
				amount: retrieve_amount,
				payment_method: retrieve_payment_method,
				user_status: 0,
				subscription_status: subscription_status,
				)
	end

	def set_subscribe_date
		date = DateTime.now.strftime('%d-%m-%Y %H:%M:%S')
	end

	def retrieve_amount
		amount = @user.subscription_plan.cost
  end

	def retrieve_plan
		plan = @user.subscription_plan.plan_name
	end

	def set_expiry_date(subscribe_date)
		expiry_date = DateTime.new
		if @user.subscription_plan.duration == "monthly"
				expiry_date =  (DateTime.parse(subscribe_date) + 30).strftime('%d-%m-%Y %H:%M:%S')
		elsif @user.subscription_plan.duration == "annually"
				expiry_date = (DateTime.parse(subscribe_date).next_year).strftime('%d-%m-%Y %H:%M:%S')
		end
		expiry_date
	end

	# def find_user
	# 	@user = User.find(params[:id])
	# end

	def get_paystack_object
		@paystackObj = Paystack.new
	end

	def initiate_paystack_sub
		subscription = PaystackSubscriptions.new(@paystackObj)
	end
 
	def check_paystack_subscription
		@user = User.find(params[:id].to_i)
		if @user.paystack_subscription_code.nil?
			return false
		else
			paystack_subscription_code = @user.paystack_subscription_code
			subscription = initiate_paystack_sub
			result = subscription.get(paystack_subscription_code)
			if !result.dig('data', 'plan','subscriptions').empty?
				subscription_present =  true
			else
				subscription_present = false
			end
				return subscription_present
		end
	end

	def disable_current_paystack_subscription
		paystack_subscription_code = @user.paystack_subscription_code
		email_token = @user.paystack_email_token
		payload = {
			:code => paystack_subscription_code,
			:token => email_token,
		}
		begin
			uri = URI('https://api.paystack.co/subscription/disable')
			http = Net::HTTP.new(uri.host, uri.port)
			http.use_ssl = true
			http.verify_mode = OpenSSL::SSL::VERIFY_NONE
			req = Net::HTTP::Post.new(uri.path, {'Content-Type' =>'application/json',
																						'Authorization' => "Bearer #{ENV["PAYSTACK_PRIVATE_KEY"]}" })
			req.body = JSON.generate(payload)
			res = http.request(req)
			result = JSON.parse(res.body)
		rescue => e
				puts "failed #{e}"
				Raven.capture_exception(e)
		end
		return result
	end

	def create_general_transaction(subscribe_date, amount, payment_method)
		GeneralTransaction.create(
				member_fullname: @user.fullname,
				transaction_type: 1,
				subscribe_date: subscribe_date,
				expiry_date: set_expiry_date(subscribe_date),
				payment_method: payment_method,
				subscription_plan: retrieve_gym_plan,
				subscription_status: 0,
				customer_code: @user.customer_code,
				user_email: @user.email,
				amount: amount )
	end

	def set_paystack_start_date
		start_date = ""
		if @member.subscription_plan.duration == "monthly"
				start_date = date.next_month.strftime('%FT%T%:z').to_s
		elsif @member.subscription_plan.duration == "annually"
				start_date = date.next_year.strftime('%FT%T%:z').to_s
		end
		return start_date
	end

	#Hack to set adjust subscribe start date it falls above 28th of the month
	# Paystack does not permit subscription payment after 28th of every month.
	# customers who subscribe after 28th will have their subscription started
	# on the first day of the following month
	def subscribe_date_consistency(date)

	end

	def get_subscription_plan_code
		@user.subscription_plan.paystack_plan_code
	end

	def verify_transaction(reference)
		begin
				uri = URI("https://api.paystack.co/transaction/verify/#{reference}")
				http = Net::HTTP.new(uri.host, uri.port)
				http.use_ssl = true
				http.verify_mode = OpenSSL::SSL::VERIFY_NONE
				req = Net::HTTP::Get.new(uri.path, {
						'Authorization' => "Bearer #{ENV["PAYSTACK_PRIVATE_KEY"]}"
						}
				)
				res = http.request(req)
				subscribe = JSON.parse(res.body)
		rescue => e
				puts "failed #{e}"
		end
	end

	def paystack_subscribe
			options = {
					reference: params[:reference_code],
					user: @user,
					paystack_key: ENV["PAYSTACK_PRIVATE_KEY"],
					user_name: current_user
			}
			subscribe_status = PaymentProcessing::Subscribe.new(options).paystack_subscribe

			if subscribe_status == 200

					render status: 200, json: {
							message: "success"
					}
			elsif subscribe_status == 400

					render  status: 400, json: {
							message: "Transaction vertification with Paystack failed"
					}
			elsif subscribe_status == 500

					render status: 400, json: {
							message: "failed to enable subscription"
					}
			end

	end
	
  def set_transaction
		@Transaction = Transaction.find(params[:id])
	end

	def transaction_params
		params.require(:transaction).permit!
	end
end
