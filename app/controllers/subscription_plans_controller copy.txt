# class SubscriptionPlansController < ApplicationController
#   # include the Paystack module to access the Paystack API
#   # include Paystack

#   # require an enterprise to be logged in before accessing this controller
#   before_action :require_enterprise

#   def index
#     # retrieve all available subscription plans from the database
#     @subscription_plans = SubscriptionPlan.all
#   end

#   def show
#     # retrieve the selected subscription plan from the database
#     @subscription_plan = SubscriptionPlan.find(params[:id])
#   end

#   def new
#     # create a new subscription plan object
#     @subscription_plan = SubscriptionPlan.new
#   end

#   def create
#     # create a new subscription plan object with the form params
#     @subscription_plan = SubscriptionPlan.new(subscription_plan_params)

#     # check if the subscription plan is valid
#     if @subscription_plan.valid?
#       # initiate a payment transaction with the Paystack API
#       transaction = Paystack::Transaction.initialize({
#         amount: (@subscription_plan.price * 100).to_i, # amount must be in kobo
#         email: current_enterprise.email,
#         callback_url: new_enterprise_url
#       })

#       # check if the transaction was successful
#       if transaction.success?
#         # save the transaction reference and the selected subscription plan to the enterprise object
#         current_enterprise.update(
#           transaction_reference: transaction.reference,
#           subscription_plan: @subscription_plan
#         )

#         # redirect the user to the Paystack payment page
#         redirect_to transaction.payment_page
#       else
#         # if the transaction failed, display an error message
#         flash[:alert] = "Transaction could not be completed: #{transaction.message}"
#         render 'new'
#       end
#     else
#       # if the subscription plan is invalid, display the errors
#       render 'new'
#     end
#   end

#   def require_enterprise
#   end

#   private

#   def subscription_plan_params
#     params.require(:subscription_plan).permit(:name, :price, :duration, :features)
#   end
# end
