class SubscriptionsController < ApplicationController
  before_action :authenticate_user!
  before_action :find_subscription, only: [:show, :update, :upgrade]
  
  def index
    @subscriptions = current_user.subscriptions.all
  end

  def new
    @subscription = current_user.subscriptions.build
    @subscription_plans = SubscriptionPlan.all
  end

  def create
    @subscription_plan = SubscriptionPlan.find(params[:subscription_plan_id])
    @subscription = current_user.subscriptions.build(subscription_plan: @subscription_plan)
    
    begin
      @paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_SECRET_KEY'])

      transaction_data = {
        :email => current_user.email,
        :plan => @subscription_plan.code
      }

      result = @paystackObj.initializeTransaction(transaction_data)

      if result['status'] == true
        auth_url = result['data']['authorization_url']

        redirect_to auth_url
      else
        flash[:error] = "Payment initialization failed: #{result['message']}"
        redirect_to new_subscription_path
      end
    rescue StandardError => e
      flash[:error] = "An error occurred: #{e.message}"
      redirect_to new_subscription_path
    end
  end

  def show
    @subscription = current_user.subscriptions.find(params[:id])
  end

  def subscribe
    @subscription_plan = SubscriptionPlan.find(params[:id])
    @subscription = current_user.subscriptions.build(subscription_plan: @subscription_plan)
    
    if @subscription.save
      flash[:notice] = "Subscription successfully created!"
      redirect_to root_path
    else
      flash[:error] = "Failed to subscribe to the plan."
      redirect_to subscription_plans_path
    end
  end
  
  def update
    if @subscription.update(subscription_params)
      flash[:notice] = "Subscription successfully updated!"
      redirect_to subscription_path(@subscription)
    else
      flash[:error] = "Failed to update subscription."
      redirect_to subscription_path(@subscription)
    end
  end

  def upgrade
    new_plan = SubscriptionPlan.find(params[:new_subscription_plan_id])

    if @subscription.update(subscription_plan: new_plan)
      flash[:notice] = "Subscription successfully upgraded!"
      redirect_to subscription_path(@subscription)
    else
      flash[:error] = "Failed to upgrade subscription."
      redirect_to subscription_path(@subscription)
    end
  end

  def callback
    begin
      @paystackObj = Paystack.new(ENV['PAYSTACK_PUBLIC_KEY'], ENV['PAYSTACK_SECRET_KEY'])

      transaction_reference = params[:trxref]
      result = @paystackObj.verifyTransaction(transaction_reference)

      if result['data']['status'] == "success"
        process_payment(result)
      else
        flash[:error] = "Payment failed: #{result['message']}"
      end
    rescue StandardError => e
      flash[:error] = "An error occurred: #{e.message}"
    end
  end

  private

  def find_subscription
    @subscription = current_user.subscriptions.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:error] = "Subscription not found."
    redirect_to root_path
  end

  def subscription_params
    params.require(:subscription).permit(:subscription_plan_id)
  end
end
